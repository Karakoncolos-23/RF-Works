// e32_client.pde
// -*- mode: C++ -*-
// Example sketch showing how to create a simple messageing client
// with the RH_E32 class. RH_E32 class does not provide for addressing or
// reliability, so you should only use RH_E32 if you do not need the higher
// level messaging abilities.
// It is designed to work with the other example e32_server
// Tested on Uno with E32-TTL-1W
 
#include <RH_E32.h>
#include "SoftwareSerial.h"
 
SoftwareSerial mySerial(7, 6);
RH_E32  driver(&mySerial, 4, 5, 8);
 
void setup(){

	Serial.begin(9600);

	while (!Serial) ; 
  
	mySerial.begin(9600);
 
	while (!mySerial) ;
 
  	if (!driver.init()){

  		Serial.println(F("INITIALISATION IS FAILED"));

	}
 
  	if (!driver.setFrequency(410)){

    		Serial.println(F("CARRIER FREQUENCY INITIALISATION IS FAILED!"));

	}

}
 
void loop(){

	delay(1000);

	keep_transmitting_tm_packet:

  	uint8_t tm_packet[] = "Hello from the dispenser!";

  	driver.send(tm_packet, sizeof(tm_packet));
  
  	driver.waitPacketSent();

	Serial.println(F("A TM PACKET IS SENT!"));

	driver.waitAuxHigh();

	if (driver.available()){

		uint8_t buf[RH_E32_MAX_MESSAGE_LEN];
  		uint8_t len = sizeof(buf);

		if (driver.recv(buf, &len)){

      			Serial.print("A TC PACKET IS RECEIVED!"); Serial.print("TC PACKET: ");Serial.println((char*)buf);







			driver.waitAuxHigh();
    		}

    		else{

      			Serial.println("RECEPTION IS FAILED!");

			goto keep_transmitting_tm_packet;
    		}

  	}

	else{

		goto keep_transmitting_tm_packet;

	}

}